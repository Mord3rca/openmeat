// Packet -*- C++ -*- header

#ifndef OM_PACKET_HEADER
#define OM_PACKET_HEADER

#include <vector>
#include <ostream>
#include <initializer_list>

#include "openmeat/opcodes"

namespace Openmeat::Network
{
    const size_t MINIMAL_PACKET_SIZE=2;

    class Packet : public std::vector<unsigned char>
    {
    public:
        Packet();
        Packet(std::initializer_list<unsigned char>);

        void reserve(Packet::size_type);

        opcode_t opcode() const;

        // Methods for reading
        template<class T> void readAt(Packet::size_type, T&) const;

        // Methods for writting
        template<class T> void writeAt(Packet::size_type, T const &);
        void writeAt(Packet::size_type, const unsigned char*, const size_t);
    };

    class PacketWriter
    {
    public:
        PacketWriter();
        PacketWriter(Packet*);
        PacketWriter(Packet&);

        Packet::size_type seek() const noexcept;
        void seek(const Packet::size_type) noexcept;

        template<class T> PacketWriter& operator<<(T const &);

    private:
        Packet *__p;
        Packet::size_type __s;
    };

    class PacketReader
    {
    public:
        PacketReader();
        PacketReader(Packet*);
        PacketReader(Packet&);

        void seek(const Packet::size_type);
        Packet::size_type seek() const noexcept;

        template<class T> PacketReader& operator>>(T&);

    private:
        Packet *__p;
        Packet::size_type __s;
    };

    extern const Packet keepAlive;
}

#endif //OM_PACKET_HEADER
